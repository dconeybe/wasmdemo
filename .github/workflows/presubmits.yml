name: wasmdemo

on: [pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test_desktop:
    name: test_${{ matrix.target_arch }}_${{ matrix.build_type }}
    continue-on-error: false
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: ["Debug", "Release"]
        target_arch: ["wasm32", "linux"]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: apt-get install prerequisites
        shell: bash
        run: exec sudo apt-get install cmake ninja-build ccache

      - name: ccache setup
        shell: bash
        run: |
          set -euo pipefail
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >>${GITHUB_ENV}
          echo "CCACHE_DIR=${{ github.workspace }}/ccache_cache" >>${GITHUB_ENV}
          echo "CCACHE_COMPILERCHECK=content" >>${GITHUB_ENV}
          echo "CCACHE_COMPRESS=1" >>${GITHUB_ENV}
          echo "CCACHE_COMPRESSLEVEL=-1" >>${GITHUB_ENV}
          echo "CCACHE_MAXSIZE=200M" >>${GITHUB_ENV}
      
      - name: ccache --show-config
        continue-on-error: true
        shell: bash
        run: exec ccache --show-config
      
      - name: cache ccache directory
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/ccache_cache
          key: build_${{ matrix.target_arch }}_${{ matrix.build_type }}_${{ github.run_id }}_${{ github.run_number }}_${{ github.run_attempt }}
          restore-keys: |
            build_${{ matrix.target_arch }}_${{ matrix.build_type }}_${{ github.run_id }}_${{ github.run_number }}_
            build_${{ matrix.target_arch }}_${{ matrix.build_type }}_${{ github.run_id }}_
            build_${{ matrix.target_arch }}_${{ matrix.build_type }}_

      - name: install wasi-sdk and wasmtime (wasm32)
        if: matrix.target_arch == 'wasm32'
        shell: bash
        run: |
          set -euo pipefail

          cd ${{ runner.temp }}

          wget https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-17/wasi-sdk-17.0-linux.tar.gz
          tar xf wasi-sdk-17.0-linux.tar.gz
          export WASM32_CLANG_ROOT="${{ runner.temp }}/wasi-sdk-17.0"
          if [[ ! -e ${WASM32_CLANG_ROOT} ]] ; then
            echo "ERROR: WASM32_CLANG_ROOT not found: ${WASM32_CLANG_ROOT}" >&2
            exit 1
          fi
          echo "WASM32_CLANG_ROOT=${WASM32_CLANG_ROOT}" >>${GITHUB_ENV}

          wget https://github.com/bytecodealliance/wasmtime/releases/download/v3.0.1/wasmtime-v3.0.1-x86_64-linux.tar.xz
          tar xf wasmtime-v3.0.1-x86_64-linux.tar.xz
          export WASMDEMO_WASMTIME_EXECUTABLE="${{ runner.temp }}/wasmtime-v3.0.1-x86_64-linux/wasmtime"
          if [[ ! -e ${WASMDEMO_WASMTIME_EXECUTABLE} ]] ; then
            echo "ERROR: WASMDEMO_WASMTIME_EXECUTABLE not found: ${WASMDEMO_WASMTIME_EXECUTABLE}" >&2
            exit 1
          fi
          echo "WASMDEMO_WASMTIME_EXECUTABLE=${WASMDEMO_WASMTIME_EXECUTABLE}" >>${GITHUB_ENV}

      - name: cmake Configure (linux)
        if: matrix.target_arch == 'linux'
        shell: bash
        run: |
          export CC=clang CXX=clang++
          exec cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -G Ninja

      - name: cmake Configure (wasm32)
        if: matrix.target_arch == 'wasm32'
        shell: bash
        run: |
          exec cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_TOOLCHAIN_FILE=wasm32.toolchain.cmake \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -G Ninja

      - name: cmake --build
        shell: bash
        run: exec cmake --build build --verbose

      - name: ctest
        shell: bash
        run: cd build && exec ctest --tests-regex wasmdemo --verbose

      - name: ccache statistics
        continue-on-error: true
        shell: bash
        run: |
          ccache --show-stats -v -v
          ccache --show-config
          ccache --show-compression